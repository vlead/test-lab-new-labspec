/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * StrucMain.java
 *
 * Created on 20 Dec, 2010, 8:33:51 AM
 */

package StrucMain;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Frame;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.StringTokenizer;
import javax.swing.JOptionPane;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.SwingUtilities;
import javax.swing.border.BevelBorder;
import javax.swing.text.html.HTMLEditorKit;
import sun.net.dns.ResolverConfiguration.Options;
/**
 *
 * @author abhiramj
 */
public class StrucMain extends javax.swing.JApplet {

    /** Initializes the applet StrucMain */
    @Override
    public void init() {
        try {
            java.awt.EventQueue.invokeAndWait(new Runnable() {
                public void run() {
                    initComponents();
                }
            });
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jTextPane1.setEditorKit(new HTMLEditorKit());

        jPanel1.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.shadow"));

        jLabel1.setFont(new java.awt.Font("DejaVu Sans", 1, 18));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Structures");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(252, 252, 252)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(331, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel2.setText("Step1 : Define a structure");

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jTextArea2.setText("struct account{\n\n\n\n};");
        jScrollPane2.setViewportView(jTextArea2);

        jButton1.setText("Next Step");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setText("Definition of Account");

        jTextPane1.setEditable(false);
        jTextPane1.setText("Bank of Gujrat has decided to computerize all its records. They hired a software programmer, Ravi. He suggested that five pieces of data had to be maintained in every account. They are :<br>\n<br>\n1)Account type, either checking or savings<br>\n2)Account holder name<br>\n3)Branch in which the account is based<br>\n4)A unique account number<br>\n5)The current balance in the account<br>\n<br><br>\nRavi decides that using different variables to represent all this data would be messy and inefficient. He decides that it would be better to represent the account's variables with the help of a structure.\n<br>\nHelp Ravi write an account structure with the following variables:<br>\n<br>\nchar type:(max size 10)<br>\nchar holder:(max size 30)<br>\nchar branch:(max size 20)<br>\nchar no:(account number,length 10)<br>\nunsigned int bal (stores current balance):<br>\n<br>\nExample of an employee structure:<br>\n<br>\n<b>struct database {<br>\n  unsigned int id_number;<br>\n  unsigned int age;<br>\n  unsigned int salary;<br>\n};<br></b>\n<br>\nNow define an Account structure below:<br>");
        jScrollPane1.setViewportView(jTextPane1);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(818, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addContainerGap(867, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 909, Short.MAX_VALUE)
                        .addGap(90, 90, 90))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 824, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addGap(30, 30, 30))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addContainerGap())
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
         click+=1;
         System.out.println(click);
              final JDialog dialog = new JDialog((Frame) SwingUtilities.getAncestorOfClass(StrucMain.class, this));
        dialog.setMinimumSize(new Dimension(600, 400));
             
             JPanel headPanel = new JPanel();
             JLabel title = new JLabel("Please check to see if your code compares to the correct solution");
             headPanel.add(title);
             JPanel codePanel= new JPanel(new GridLayout(0,2));
             JPanel userCodePanel=new JPanel(new BorderLayout());
             userCodePanel.setBorder(new BevelBorder(1));
             JPanel actCodePanel=new JPanel(new BorderLayout());
             actCodePanel.setBorder(new BevelBorder(1));
             JTextArea userCode = new JTextArea("");
             JTextArea actCode= new JTextArea("");
             userCode.setEditable(false);
             actCode.setEditable(false);
             JLabel userCodeLabel = new JLabel("User code");
             JLabel actCodeLabel = new JLabel("Solution");



             userCodePanel.add(userCodeLabel,BorderLayout.PAGE_START);
             actCodePanel.add(actCodeLabel,BorderLayout.PAGE_START);

             //userCodePanel.add(this)


             userCodePanel.add(userCode,BorderLayout.CENTER);

             actCodePanel.add(actCode,BorderLayout.CENTER);


             codePanel.add(userCodePanel);
             codePanel.add(actCodePanel);
             //codePanel.add(Box.createRigidArea(new Dimension(1, 10)));

             JPanel confirmPanel = new JPanel();
             confirmPanel.setLayout(new BoxLayout(confirmPanel, BoxLayout.PAGE_AXIS));
             JButton yes = new JButton("Yes");
             JButton no = new JButton("No");
             JPanel result = new JPanel(new FlowLayout(FlowLayout.CENTER));
             result.add(yes);
             result.add(no);
             confirmPanel.add(headPanel);
             confirmPanel.add(codePanel);
             confirmPanel.add(result);
             dialog.add(confirmPanel);

             confirmPanel.add(headPanel);
             confirmPanel.add(codePanel);
             confirmPanel.add(result);
             dialog.add(confirmPanel);
         if (click==1){
if (check_input()) {
    jLabel2.setText("Step 2: Declare a structure");
    jTextPane1.setText("Let us say we are opening an account for Suresh We will simply say:<br><br>" +
            "<b>struct account Suresh;<br><br></b>" +
            "We can also use a type definition. This allows us to create account as a type of variable" +
            "similar to int or char. If we do that we can create his account as follows: <br><br>" +
            "<b>typedef struct account account;<br>" +
            "account Suresh;<br><br></b>" +
            "We can also create an array of accounts as follows:<br><br>" +
            "<b>account bank[10];<br><br></b>" +
            "Create an account variable named ram and one named shyam. Also set balance to be 100 for ram" +
            " and shyam as two times account balance of ram. Assume that account type is created.<br /><br />" +
            "//Previous sample code:<br />" +
            "<b>struct account{<br />" +
            "char type[11];<br />" +
            "char holder[31];<br />" +
            "char branch[21];<br />" +
            "char no[11];<br />" +
            "unsigned int bal;<br />" +
            "}<br />" +
            "typedef struct account account;</b><br />" +
            "//Or <br /> " +
            "<b>struct account{<br />" +
            "char type[11];<br />" +
            "char holder[31];<br />" +
            "char branch[21];<br />" +
            "char no[11];<br />" +
            "unsigned int bal;<br />" +
            "};</b><br />" );
    jLabel3.setText("Declare a structure below");
    jTextArea2.setText("");
}

            
    
            }
             if (click==2){

            userCode.setText(jTextArea2.getText());
             actCode.setText("account ram;\n" +
                     "account shyam;\n" +
                     "ram.bal=100;\n" +
                     "shyam.bal=2*ram.bal;");

             yes.addActionListener(new ActionListener() {

                public void actionPerformed(ActionEvent e) {
                    dialog.dispose();
                    jLabel2.setText("Step 3: Function to fill a structure");
                    jTextPane1.setText(
            "Write a function to fill up an account. It takes the account variables as input and returns an account structure. " +
                            "<br />Now we have to fill up Suresh's account. Insert code to fill up his account as follows.<br><br>" +
            "Account Type = Savings (Only Savings(smallcase) and Current(smallcase) allowed)<br> " +
            "Account Name = Suresh<br>" +
            "Account Branch = M.G Road, Bangalore<br>" +
            "Account Number = 1000000000 (Check if length = 10 characters)<br>" +
            "Account Balance = 10000<br />");
    jLabel3.setText("Function to fill an account");
    jTextArea2.setText("account initAcc(char* name,char* type,char* branch,char* number,unsigned int balance)\n" +
            "{" +
            "\n" +
            "}");


                }
            });
            no.addActionListener(new ActionListener() {

                public void actionPerformed(ActionEvent e) {
                    dialog.dispose();
                    click-=1;

                }
            });
             dialog.setVisible(true);

    



             }
         if (click==3){
             
             userCode.setText(jTextArea2.getText());
             actCode.setText("account initAcc(char* name,char* type,char* branch,char* number,unsigned int balance){\n " +
                     "int isErr=0;\n" +
                     "account newAc;\n" +
                     "strcpy(newAc.holder,name);\n" +
                     "strcpy(newAc.branch,branch);\n" +
                     "if (strcmp(type,\"current\")==0 || strcmp(type,\"savings\")==0)\n" +
                     "strcpy(newAc.type,type);\n" +
                     "else isErr=1;\n" +
                     "if (strlen(number)==10)\n" +
                     "strcpy(newAc.no,number);\n" +
                     "else isErr=1;\n" +
                     "newAc.bal=balance;\n" +
                     "if (!isErr)\n" +
                     "return (newAc);\n" +
                     "return NULL;\n" +
                     "}");
        
             yes.addActionListener(new ActionListener() {

                public void actionPerformed(ActionEvent e) {
                    dialog.dispose();
                    jLabel2.setText("Step 4: Use structures to handle data");
                    jLabel3.setText("Code to find person with maximum balance");
                    jTextPane1.setText("Let us now write a code to find the details of the person with maximum balance in their account for the following main function..<br /><br />" +
                            "//Previous code\n" +
                            "<b>struct account{<br />" +
            "char type[11];<br />" +
            "char holder[31];<br />" +
            "char branch[21];<br />" +
            "char no[11];<br />" +
            "unsigned int bal;<br />" +
            "}<br />" +
            "typedef struct account account;<br /><br />" +
                            "//Assume initAcc is defined and following is the prototype<br />" +
                            "account initAcc(char* name,char* type,char* branch,char* number,unsigned int balance);<br /><br /> " +
                            "void main(){<br />" +
                            "account bank[4];" +
                            "bank[0]=initAcc(\"Ram\",\"Savings\",\",1000000000,300);<br />" +
                            "bank[1]=initAcc(\"Shyam\",\"Savings\",\",1000000001,700);<br />" +
                            "bank[2]=initAcc(\"Pradeep\",\"Current\",\",1000000002,600);<br />" +
                            "bank[3]=initAcc(\"Suresh\",\"Savings\",\",1000000004,800);<br />" +
                            "account max=findmax(bank);<br />" +
                            "}<br />" +
                            "</b>");
                    jTextArea2.setText("account findMax(account src[]){"+
                            "\n" +
                            "}");

                    

                }
            });
            no.addActionListener(new ActionListener() {

                public void actionPerformed(ActionEvent e) {
                    dialog.dispose();
                    click-=1;
                    
                }
            });
             dialog.setVisible(true);
   
            }
         if (click==4){
             userCode.setText(jTextArea2.getText());
             actCode.setText("account findMaxBal(account src[], int size){\n" +
                     "int i=0;\n" +
                     "int maxBalIndex=0;\n" +
                     "for (;i<size;i++){\n" +
                     "if (src[i].bal>src[maxBalIndex].bal)\n" +
                     "maxBalIndex=i;\n" +
                     "}\n" +
                     "printf (\"maxBalIndex is %d\", maxBalIndex);\n" +
                     "return src[maxBalIndex];\n" +
                     "}"
);

             yes.addActionListener(new ActionListener() {

                public void actionPerformed(ActionEvent e) {
                    dialog.dispose();
                    JOptionPane.showMessageDialog(rootPane, "Program will now exit.");
                    click-=1;
                    jButton1.setEnabled(false);

                   /* jLabel2.setText("Step 4: Sort srtuctures:");
                    jLabel3.setText("Function to sort array of structures");
                    jTextPane1.setText("Now write a function to sort the accounts by account balance." +
                            " You can use a simple algorithm like insertion sort or selection sort.");
                    jTextArea2.setText("account * sortAcc(account src[]){"+
                            "\n" +
                            "}");*/



                }
            });
            no.addActionListener(new ActionListener() {

                public void actionPerformed(ActionEvent e) {
                    dialog.dispose();
                    click-=1;
                    
                }
            });
             dialog.setVisible(true);


         }

    }//GEN-LAST:event_jButton1ActionPerformed
private boolean check_input(){
StringTokenizer strTok = new StringTokenizer(jTextArea2.getText()," ,/;{}[]\n\t\r",true);
        ArrayList<String> defineStruct  = new ArrayList();
        boolean bracketFlag=false;
        boolean defineFlag=false;
        boolean gotError=false;
        boolean sizeError=false;
        while (strTok.hasMoreTokens()){
            String P= strTok.nextToken();
            if ( P.equals("[") ){
                bracketFlag=true;
                if (strTok.hasMoreTokens())
                P=strTok.nextToken();
                }
            else if ( P.equals("]") ){
                    if (strTok.hasMoreTokens())
                    P=strTok.nextToken();
                    bracketFlag=false;
                }         
            if (!(P.equals(" ") || P.equals("\n") || P.equals("\t")|| P.equals("\r") || P.equals("]") || P.equals("]")))
                defineStruct.add(P);
        }
        if (bracketFlag==true)
            gotError= true;
        //for (int i=0;i<defineStruct.size();i++)
           // System.out.println(defineStruct.get(i));
            ArrayList<String> vars = new ArrayList<String>(5);
            ArrayList<Integer> sizes = new ArrayList<Integer>(5);
            int allDefined=0;
            try{
if (defineStruct.get(0).equals("struct") && defineStruct.get(1).equals("account")){
    defineFlag=true;
defineStruct.remove(0);
defineStruct.remove(0);
}

           if (defineStruct.get(0).equals("{")){
            bracketFlag=true;
            defineStruct.remove(0);
            }
           else gotError=true;

            for (;allDefined<4 && !gotError;){
            int i=defineStruct.indexOf("char");
            if (i==-1)
            { gotError=true;
            }

            if (!reserved(defineStruct.get(i+1))){
                vars.add(defineStruct.get(i+1));
                try{
                int q=Integer.parseInt(defineStruct.get(i+2));
                 sizes.add(q);
                    if(defineStruct.get(i+3).equals(";")){
                        allDefined+=1;
                        for (int p=0;p<4;p++){
                        defineStruct.remove(i);
                        }
                    }
                    else gotError=true;
                }
                catch(Exception e){
                gotError=true;
                }

            }
            else gotError=true;
            }
            try{
            int i=defineStruct.indexOf("unsigned");
            if (i==-1)
                gotError=true;
            if (defineStruct.get(i+1).equals("int")){
            if (!reserved(defineStruct.get(i+2))){
            vars.add(defineStruct.get(i+2));
            if (defineStruct.get(i+3).equals(";")){
            allDefined+=1;
                        for (int p=0;p<4;p++){
                        defineStruct.remove(i);
                        }
            }
            else gotError=true;
            }
            else gotError = true;
            }
            else gotError = true;
            } catch (Exception e){
            System.out.println(e);
            }
    for (int p=0;p<vars.size();p++)
        System.out.println(vars.get(p));
if ( defineStruct.get(0).equals("}")){
defineStruct.remove(0);
bracketFlag=false;
}
else gotError=true;
            if ( defineStruct.get(0).equals(";") && defineStruct.size()==1){
defineStruct.remove(0);
}
        
          int p= vars.indexOf("type");
         if (!(sizes.get(p)==11))
             sizeError=true;
            p= vars.indexOf("holder");
         if (!(sizes.get(p)==31))
             sizeError=true;
            p= vars.indexOf("branch");
         if (!(sizes.get(p)==21))
             sizeError=true;
            p= vars.indexOf("no");
         if (!(sizes.get(p)==11))
             sizeError=true;
            } catch(Exception e){
            gotError=true;
            }

            
            if (sizeError || gotError || bracketFlag || !defineFlag){
                String defineErrorMsg= "\nThere is an error in the struct definition\n";
                String bracketErrorMsg= "\nBraces are not balanced\n";
                String generalErrorMsg = "\nThere is an error in variable declaration.Please check.\n";
                String sizeErrorMsg = "\nThere is an error in variable size.\n";
                StringBuffer finalErrorMsg= new StringBuffer();
                if (!defineFlag){
                finalErrorMsg.append(defineErrorMsg);
                }
                if (bracketFlag){
                finalErrorMsg.append(bracketErrorMsg);
                }
                if (gotError){
                finalErrorMsg.append(generalErrorMsg);
                }
                if (sizeError){
                finalErrorMsg.append(sizeErrorMsg);
                }
                String[] Options= new String[2];
                Options[0]= "Yes";
                Options[1]= "No, Try again";
                int optionSelect=JOptionPane.showOptionDialog(rootPane, "Error occured." + finalErrorMsg.toString()+"\n Continue anyway?","Error",0,0,null,Options,null);
            if (optionSelect==0){
            return(true);
            }
                if (optionSelect==1){
            click-=1;
            }
    
            }
return (!gotError);

}
public boolean reserved(String S){
if (S.equals("char") || S.equals("unsigned") || S.equals("int")|| S.equals("struct") || S.equals("typedef"))
    return true;
return false;

}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables
static int click=0;
static Server s;
}
